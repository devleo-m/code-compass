// Dados mock para trilhas de aprendizado
import type { LearningPath, Lesson, Module, Question, Quiz } from '@/shared/types/learning'

// 1. Dados de JavaScript
export const javascriptPath: LearningPath = {
    id: 'javascript',
    name: 'JavaScript',
    description: 'Aprenda JavaScript do b√°sico ao avan√ßado',
    icon: 'üü®',
    color: 'yellow',
    technologies: ['ES6+', 'DOM', 'Async/Await', 'Modules'],
    difficulty: 'beginner',
    estimatedTime: 40,
    totalLessons: 24,
    totalQuizzes: 6,
    modules: [
        {
            id: 'js-basics',
            title: 'Fundamentos do JavaScript',
            description: 'Conceitos b√°sicos e sintaxe da linguagem',
            order: 1,
            progress: 0,
            isCompleted: false,
            lessons: [
                {
                    id: 'js-intro',
                    title: 'Introdu√ß√£o ao JavaScript',
                    description: 'O que √© JavaScript e por que aprender',
                    content: `
# Introdu√ß√£o ao JavaScript

JavaScript √© uma linguagem de programa√ß√£o de alto n√≠vel, interpretada e din√¢mica. Foi criada em 1995 por Brendan Eich na Netscape.

## Por que aprender JavaScript?

- **Linguagem da Web**: √â a linguagem padr√£o para desenvolvimento web
- **Versatilidade**: Pode ser usada no frontend e backend
- **Grande comunidade**: Muitos recursos e bibliotecas dispon√≠veis
- **Demanda no mercado**: Uma das linguagens mais requisitadas

## Onde o JavaScript √© usado?

1. **Frontend**: React, Vue, Angular
2. **Backend**: Node.js, Express
3. **Mobile**: React Native, Ionic
4. **Desktop**: Electron

## Primeiro c√≥digo

\`\`\`javascript
console.log("Ol√°, mundo!");
\`\`\`
          `,
                    order: 1,
                    estimatedTime: 15,
                    difficulty: 'easy',
                    tags: ['introdu√ß√£o', 'b√°sico'],
                    isCompleted: false,
                    isLocked: false,
                },
                {
                    id: 'js-variables',
                    title: 'Vari√°veis e Tipos de Dados',
                    description: 'Como declarar vari√°veis e tipos b√°sicos',
                    content: `
# Vari√°veis e Tipos de Dados

## Declarando vari√°veis

JavaScript tem tr√™s formas de declarar vari√°veis:

\`\`\`javascript
// var (n√£o recomendado)
var nome = "Jo√£o";

// let (recomendado para vari√°veis que mudam)
let idade = 25;

// const (recomendado para valores fixos)
const PI = 3.14159;
\`\`\`

## Tipos de dados b√°sicos

### String
\`\`\`javascript
let nome = "Jo√£o";
let sobrenome = 'Silva';
let template = \`Ol√°, \${nome}!\`;
\`\`\`

### Number
\`\`\`javascript
let inteiro = 42;
let decimal = 3.14;
let negativo = -10;
\`\`\`

### Boolean
\`\`\`javascript
let verdadeiro = true;
let falso = false;
\`\`\`

### Undefined e Null
\`\`\`javascript
let indefinido = undefined;
let nulo = null;
\`\`\`
          `,
                    order: 2,
                    estimatedTime: 20,
                    difficulty: 'easy',
                    tags: ['vari√°veis', 'tipos', 'b√°sico'],
                    isCompleted: false,
                    isLocked: false,
                },
                {
                    id: 'js-operators',
                    title: 'Operadores',
                    description: 'Operadores aritm√©ticos, de compara√ß√£o e l√≥gicos',
                    content: `
# Operadores em JavaScript

## Operadores Aritm√©ticos

\`\`\`javascript
let a = 10;
let b = 5;

let soma = a + b;        // 15
let subtracao = a - b;   // 5
let multiplicacao = a * b; // 50
let divisao = a / b;     // 2
let modulo = a % b;      // 0
let exponenciacao = a ** b; // 100000
\`\`\`

## Operadores de Compara√ß√£o

\`\`\`javascript
let x = 5;
let y = "5";

x == y;   // true (compara valor)
x === y;  // false (compara valor e tipo)
x != y;   // false
x !== y;  // true
x > 3;    // true
x <= 5;   // true
\`\`\`

## Operadores L√≥gicos

\`\`\`javascript
let a = true;
let b = false;

a && b;   // false (AND)
a || b;   // true (OR)
!a;       // false (NOT)
\`\`\`
          `,
                    order: 3,
                    estimatedTime: 25,
                    difficulty: 'easy',
                    tags: ['operadores', 'aritm√©ticos', 'compara√ß√£o'],
                    isCompleted: false,
                    isLocked: false,
                },
            ],
            quiz: {
                id: 'js-basics-quiz',
                title: 'Quiz: Fundamentos do JavaScript',
                description: 'Teste seus conhecimentos sobre os fundamentos',
                timeLimit: 10,
                passingScore: 70,
                attempts: 0,
                bestScore: 0,
                isCompleted: false,
                questions: [
                    {
                        id: 'q1',
                        type: 'multiple-choice',
                        question: 'Qual √© a forma mais moderna de declarar uma vari√°vel que pode ser alterada?',
                        options: ['var', 'let', 'const', 'variable'],
                        correctAnswer: 'let',
                        explanation: 'let √© a forma mais moderna e recomendada para vari√°veis que podem ser alteradas.',
                        difficulty: 'easy',
                        points: 10,
                    },
                    {
                        id: 'q2',
                        type: 'true-false',
                        question: 'JavaScript √© uma linguagem tipada estaticamente.',
                        options: ['Verdadeiro', 'Falso'],
                        correctAnswer: 'Falso',
                        explanation: 'JavaScript √© uma linguagem dinamicamente tipada.',
                        difficulty: 'easy',
                        points: 10,
                    },
                ],
            },
        },
        {
            id: 'js-functions',
            title: 'Fun√ß√µes',
            description: 'Como criar e usar fun√ß√µes',
            order: 2,
            progress: 0,
            isCompleted: false,
            lessons: [
                {
                    id: 'js-function-basics',
                    title: 'Fun√ß√µes B√°sicas',
                    description: 'Declarando e chamando fun√ß√µes',
                    content: `
# Fun√ß√µes em JavaScript

## Declarando fun√ß√µes

### Function Declaration
\`\`\`javascript
function saudacao(nome) {
  return \`Ol√°, \${nome}!\`;
}
\`\`\`

### Function Expression
\`\`\`javascript
const saudacao = function(nome) {
  return \`Ol√°, \${nome}!\`;
};
\`\`\`

### Arrow Function
\`\`\`javascript
const saudacao = (nome) => {
  return \`Ol√°, \${nome}!\`;
};

// Forma mais concisa
const saudacao = nome => \`Ol√°, \${nome}!\`;
\`\`\`

## Chamando fun√ß√µes

\`\`\`javascript
// Chamada simples
saudacao("Jo√£o");

// Armazenando resultado
const mensagem = saudacao("Maria");
console.log(mensagem); // "Ol√°, Maria!"
\`\`\`
          `,
                    order: 1,
                    estimatedTime: 20,
                    difficulty: 'easy',
                    tags: ['fun√ß√µes', 'b√°sico'],
                    isCompleted: false,
                    isLocked: true,
                },
            ],
        },
    ],
}

// 2. Dados de TypeScript
export const typescriptPath: LearningPath = {
    id: 'typescript',
    name: 'TypeScript',
    description: 'JavaScript com tipagem est√°tica',
    icon: 'üî∑',
    color: 'blue',
    technologies: ['Types', 'Interfaces', 'Generics', 'Decorators'],
    difficulty: 'intermediate',
    estimatedTime: 30,
    totalLessons: 18,
    totalQuizzes: 4,
    modules: [
        {
            id: 'ts-basics',
            title: 'Fundamentos do TypeScript',
            description: 'Introdu√ß√£o √† tipagem est√°tica',
            order: 1,
            progress: 0,
            isCompleted: false,
            lessons: [
                {
                    id: 'ts-intro',
                    title: 'Introdu√ß√£o ao TypeScript',
                    description: 'O que √© TypeScript e suas vantagens',
                    content: `
# Introdu√ß√£o ao TypeScript

TypeScript √© um superset do JavaScript que adiciona tipagem est√°tica opcional.

## Vantagens do TypeScript

- **Detec√ß√£o de erros**: Encontra bugs em tempo de desenvolvimento
- **Melhor IDE**: Autocomplete e refatora√ß√£o mais inteligentes
- **Documenta√ß√£o**: Tipos servem como documenta√ß√£o
- **Manutenibilidade**: C√≥digo mais f√°cil de manter

## Instala√ß√£o

\`\`\`bash
npm install -g typescript
\`\`\`

## Primeiro arquivo TypeScript

\`\`\`typescript
// hello.ts
function saudacao(nome: string): string {
  return \`Ol√°, \${nome}!\`;
}

console.log(saudacao("TypeScript"));
\`\`\`

## Compilando

\`\`\`bash
tsc hello.ts
\`\`\`
          `,
                    order: 1,
                    estimatedTime: 15,
                    difficulty: 'easy',
                    tags: ['introdu√ß√£o', 'typescript'],
                    isCompleted: false,
                    isLocked: false,
                },
            ],
        },
    ],
}

// 3. Dados de React
export const reactPath: LearningPath = {
    id: 'react',
    name: 'React',
    description: 'Biblioteca JavaScript para interfaces',
    icon: '‚öõÔ∏è',
    color: 'cyan',
    technologies: ['React Hooks', 'Context API', 'Redux', 'Next.js'],
    difficulty: 'intermediate',
    estimatedTime: 50,
    totalLessons: 30,
    totalQuizzes: 8,
    modules: [
        {
            id: 'react-basics',
            title: 'Fundamentos do React',
            description: 'Componentes e JSX',
            order: 1,
            progress: 0,
            isCompleted: false,
            lessons: [
                {
                    id: 'react-intro',
                    title: 'Introdu√ß√£o ao React',
                    description: 'O que √© React e por que usar',
                    content: `
# Introdu√ß√£o ao React

React √© uma biblioteca JavaScript para construir interfaces de usu√°rio.

## Caracter√≠sticas do React

- **Componentes**: Interface dividida em partes reutiliz√°veis
- **Virtual DOM**: Renderiza√ß√£o eficiente
- **Unidirecional**: Fluxo de dados previs√≠vel
- **Ecosistema**: Grande comunidade e ferramentas

## Primeiro componente

\`\`\`jsx
import React from 'react';

function Saudacao() {
  return <h1>Ol√°, React!</h1>;
}

export default Saudacao;
\`\`\`

## JSX

JSX permite escrever HTML dentro do JavaScript:

\`\`\`jsx
const elemento = (
  <div>
    <h1>Ol√°</h1>
    <p>Mundo</p>
  </div>
);
\`\`\`
          `,
                    order: 1,
                    estimatedTime: 20,
                    difficulty: 'easy',
                    tags: ['react', 'componentes', 'jsx'],
                    isCompleted: false,
                    isLocked: false,
                },
            ],
        },
    ],
}

// 4. Exportando todas as trilhas
export const learningPaths: Record<string, LearningPath> = {
    javascript: javascriptPath,
    typescript: typescriptPath,
    react: reactPath,
}

// 5. Fun√ß√£o para obter trilha por ID
export function getLearningPath(id: string): LearningPath | null {
    return learningPaths[id] || null
}

// 6. Fun√ß√£o para listar todas as trilhas
export function getAllLearningPaths(): LearningPath[] {
    return Object.values(learningPaths)
}

// 7. Fun√ß√£o para obter m√≥dulo por ID
export function getModule(pathId: string, moduleId: string): Module | null {
    const path = getLearningPath(pathId)
    if (!path) return null

    return path.modules.find((module) => module.id === moduleId) || null
}

// 8. Fun√ß√£o para obter li√ß√£o por ID
export function getLesson(pathId: string, moduleId: string, lessonId: string): Lesson | null {
    const module = getModule(pathId, moduleId)
    if (!module) return null

    return module.lessons.find((lesson) => lesson.id === lessonId) || null
}
